generic:
  annotations:
  extraSelectorLabels:
  labels:
  podAnnotations:

configmaps:
  configmap-name:
    labels:
      lemon: squiz
    annotations:
    namespace: nginx
    data:
      ez: pz
  json-file:
    data:
      file.json: {
        "arg": "value"
      }

deployment:
  enabled: true
  autoscaling:
    enabled: false
  replicas: 1
  strategy:
    type: RollingUpdate
    maxSurge: 1
    maxUnavailable: 1
  podAnnotations:
  serviceAccountName: account
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  imagePullSecrets:
    - name: docker-secret
  terminationGracePeriodSeconds: 10
  # initContainers have the same specs as containers
  containers:
    -
      name: test
      image:
        repository: user/repo
        tag: 1.0.0
      imagePullPolicy: Always
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
      args:
        - --arg1
        - --arg2
      command: [ "./test.sh" ]
      env:
        - name: var1
          value: value1
        - name: var2
          value: value2
      envFromSecret:
        webadmin:
          - JAVA_OPTS: JVM_OPTS
          - RND
      envSecrets:
        - secret-envs
      envFromConfigmap:
        configmap-name:
        - EZ: PZ
      envConfigmaps:
        - envs
      ports:
        - name: http
          containerPort: 80
      volumeMounts:
        - name: secret-file
          mountPath: /var/lib/secret
        - name: app-pvc
          mountPath: /var/www/html/files
  volumes:
    - name: secret-file
      type: secret
    - name: app-data
      type: pvc

hpa:
  enabled: true
  name: test
  scaleTargetRef:
    kind: deployment
    name: target-name
  minReplicas: 1
  maxReplicas: 2
  targetCPU: 90
  targetMemory: 90

imagePullSecrets: {}
#  registry.org: |
#    {"auths":{"registry.org":{"auth":"<token>"}}}
#  registry.org-rw: b64:<base64_encrypted_string>

ingress:
  enabled: true
  name: test
  labels:
  hosts: 
    -
      host: domain.com
      paths:
        -
          path: /api
          pathType: Prefix
          serviceName: service
          servicePort: 80
        # servicePort: http 
  tls:
    enabled: true
    secretName: secret

pvs:
  -
    name: pv
    labels:
      type: local
    annotations:
    storageClassName: manual
    accessModes:
      - ReadWriteMany
    hostPath: "/tmp"

pvcs:
  -
    name: pvc
    labels:
    annotations:
    storageClassName: manual
    accessModes:
      - ReadWriteOnce
      - ReadWriteMany
    size: 1Gi

secrets:
  secret-file:
    type: Opaque
    data:
      api.key: |-
        super-secret-key
  test:
    labels:
      foo: bar
    annotations:
      bar: foo
    type: Opaque
    data:
      key: value
  tls-secret:
    type: kubernetes.io/tls
    data:
      tls.crt: crt
      tls.key: key

services:
  nginx:
    clusterIP: None
    ports:
    -
      name: http
      protocol: TCP
      port: 80
      targetPort: 8080
    extraSelectorLabels:
      app: my-nginx